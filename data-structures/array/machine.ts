/*

Crea un programa que simule la operaci√≥n de una m√°quina expendedora, permitiendo a un usuario 
seleccionar de una lista de productos e insertar monedas hasta que alcance o supere la cantidad 
requerida para su producto elegido.

La m√°quina expendedora solo aceptar√° denominaciones de monedas espec√≠ficas, y si el usuario inserta 
m√°s del monto requerido, deber√° devolver el exceso como cambio.

La m√°quina expendedora tiene tres productos: A (üçî), B (üçï) y C (üåÆ)

Cada producto tiene un precio espec√≠fico: A cuesta $14. B cuesta $10. C cuesta $8.

Muestra la lista de productos con los precios correspondientes e √≠conos al usuario.

La m√°quina acepta monedas en denominaciones de $1, $2, $5 y $10. Muestra las monedas aceptadas al 
usuario y p√≠deles que inserten una de estas cantidades.

Pide al usuario que seleccione un producto escribiendo su letra correspondiente (A, B o C). 
Si el usuario ingresa una opci√≥n inv√°lida, el programa debe pedirle nuevamente hasta que ingrese 
una selecci√≥n v√°lida.

Despu√©s de seleccionar un producto, solicita al usuario que inserte monedas hasta que el monto total
insertado coincida o exceda el precio del producto seleccionado.

Lleva el registro de la cantidad insertada y muestra el balance al usuario despu√©s de cada inserci√≥n
de moneda. Una vez que se alcanza el monto requerido:

Muestra el producto seleccionado y un mensaje confirmando la compra. Calcula y muestra cualquier 
cambio si la cantidad insertada excede el precio del producto.

Limpia la consola despu√©s de cada inserci√≥n de moneda y solicitud de selecci√≥n de producto para una 
experiencia de usuario m√°s limpia.

Ejemplo:

El usuario selecciona el producto A (üçî) con un precio de $14.
El usuario comienza a insertar monedas: Inserta $5 ‚Üí Balance: $5 Inserta $10 ‚Üí Balance: $15

La m√°quina confirma la compra de üçî y devuelve $1 como cambio. Requisitos Adicionales

Implementa validaci√≥n de entrada para monedas inv√°lidas o entradas no num√©ricas.

*/

import PromptSync from "prompt-sync"

const prompt = PromptSync()

type Product = 'A' | 'B' | 'C'

interface ProductInfo {
  price: number
  food: string
}

class VendingMachine {
  private validCoins: number[]
  private totalInserted: number
  private productSelected: Product | null
  private products: Record<Product, ProductInfo>

  constructor() {
    this.totalInserted = 0
    this.productSelected = null
    this.validCoins = [1, 2, 5, 10]
    this.products = {
      A: { price: 14, food: 'üçî' },
      B: { price: 10, food: 'üçï' },
      C: { price: 8, food: 'üåÆ' },
    }
  }

  public selectProduct = async () => {
    this.productSelected = this.requestProduct()

    const { price, food } = this.products[this.productSelected]

    while (this.totalInserted < price) {
      console.clear()
      const coin = this.requestCoin(price, food)
      this.totalInserted += coin
    }
  
    console.clear()
    console.log(`Product ${food}`)
    console.log(`Change: $${this.totalInserted - price}`)
  }

  private requestProduct = (): Product => {
    let option: string = ''

    const options = Object.keys(this.products) as Product[]

    const productList = options.reduce((text, option) => {
      return text + `${option} (${this.products[option].food}) `
    }, '')

    while (!options.includes(option as Product)) {
      console.clear()
      option = prompt(`Select a product ${productList}: `)
    }
  
    return option as Product
  }

  private requestCoin = (price: number, food: string) => {
    const coins = this.validCoins.reduce((text, coin) => `${text}$${coin} `, ' ')

    console.log(`
      Product: ${food}
      Total: $${price}
      Balance: $${this.totalInserted}
    `)

    const coin = prompt(`Insert Coin (${coins}): `)

    return parseInt(coin)
  }
}

const vendingMachine = new VendingMachine()
vendingMachine.selectProduct()